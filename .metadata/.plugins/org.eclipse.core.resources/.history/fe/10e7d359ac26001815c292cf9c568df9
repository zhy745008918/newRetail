package cn.hisaas.huiguanli.activity;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import com.alibaba.fastjson.TypeReference;
import android.annotation.SuppressLint;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.drawable.GradientDrawable;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.widget.DrawerLayout;
import android.text.TextUtils;
import android.util.Log;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import cn.hisaas.huiguanli.activity.dialog.LockActivity;
import cn.hisaas.huiguanli.activity.dialog.UserActivity;
import cn.hisaas.huiguanli.activity.eum.ResultEnum;
import cn.hisaas.huiguanli.adaper.MainListAdaper;
import cn.hisaas.huiguanli.app.MainApplication;
import cn.hisaas.huiguanli.dao.PSerach;
import cn.hisaas.huiguanli.db.BaseDb;
import cn.hisaas.huiguanli.db.async.DbHandelSerach;
import cn.hisaas.huiguanli.db.async.Update;
import cn.hisaas.huiguanli.frame.BaseFragment;
import cn.hisaas.huiguanli.frame.CGGLFragment;
import cn.hisaas.huiguanli.frame.HYGLFragment;
import cn.hisaas.huiguanli.frame.KCGLFragment;
import cn.hisaas.huiguanli.frame.SHJFFragment;
import cn.hisaas.huiguanli.frame.SPGLFragment;
import cn.hisaas.huiguanli.frame.SYFragment;
import cn.hisaas.huiguanli.frame.WLDDFragment;
import cn.hisaas.huiguanli.frame.XSTJFragment;
import cn.hisaas.huiguanli.model.ConsumeInfoModel;
import cn.hisaas.huiguanli.model.ConsumeInfoModel1;
import cn.hisaas.huiguanli.model.FunctionModel;
import cn.hisaas.huiguanli.model.SerachResultOfReturn;
import cn.hisaas.huiguanli.net.HtClient;
import cn.hisaas.huiguanli.net.ListHttpResponseHandler;
import cn.hisaas.huiguanli.net.listener.SerachListenerDo;
import cn.hisaas.huiguanli.parm.SystemParm;
import cn.hisaas.huiguanli.tools.ScreenInchUtil;
import cn.hisaas.huiguanli.tools.Util;

/**
 * 主界面
 * @author Administrator
 *
 */
@SuppressLint("SimpleDateFormat")
public class MainActivity extends FragmentActivity {

	private ListView listView;
	
	private FragmentManager fragmentManager=null;
	
	private FragmentTransaction fragmentTransaction=null;
	
	private MainListAdaper adaper;
	
	//页面标签
	private String pageTag=null;
	// 余额消费，券消费，店余额
	private TextView remainingMoneyConsume,couponConsume,shopRemainingMoney;

	private DrawerLayout drawerLayout;
	private Button slideBtn;
	
	private int width,height;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		//设置屏幕长亮
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON,WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
		setContentView(R.layout.activity_main);
		MainApplication.mainActivity=this;
		//初始化用户信息
		initUser();
		//初始化数据
		initData();
		listView=(ListView)findViewById(R.id.main_list_view);
		drawerLayout=(DrawerLayout)findViewById(R.id.main_drawerlayout);
		slideBtn=(Button)findViewById(R.id.main_slide_btn);
		slideBtn.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				drawerLayout.openDrawer(Gravity.LEFT);
			}
		});
		remainingMoneyConsume=(TextView) findViewById(R.id.remaining_money_consume_in_activity_main);
		couponConsume=(TextView) findViewById(R.id.coupon_consume_in_activity_main);
		shopRemainingMoney=(TextView) findViewById(R.id.shop_remaining_money_in_activity_main);
		
		fragmentManager=getSupportFragmentManager();
		adaper=new MainListAdaper(this);
		listView.setAdapter(adaper);
		listView.setItemsCanFocus(false);
		listView.setFocusable(false);
		addMenu();
		addListViewListener();
		if(adaper.getCount()>0){
			try {
				tagSelect(adaper.getItem(0).getClassName());
				adaper.setSelectId(0);
				adaper.notifyDataSetChanged();
			} catch (Exception e) {
				Toast.makeText(getApplicationContext(), e.toString(), Toast.LENGTH_SHORT).show();
			}
		}
	}
	
	private void initData() {
		// TODO Auto-generated method stub
		Intent intent=getIntent();
		final long timeLogin=intent.getLongExtra("time_stamp", 0);
		String sql="select isfirst from md where code='"+SystemParm.md+"'";
		BaseDb.getAsyncDB().addWork(new PSerach(sql), new cn.hisaas.huiguanli.db.async.DbHandelSerach<String>() {

			@Override
			public String fromDbToModle(Cursor cursor) {
				// TODO Auto-generated method stub
				if (cursor.moveToNext()) {
					return cursor.getString(0);
				}
				return null;
			}
			@Override
			public void onRequstStart() {
				// TODO Auto-generated method stub
				
			}
			@Override
			public void onRequstFish(String result) {
				// TODO Auto-generated method stub
				if (result!=null&&!"".equals(result)) {
					//用户登陆过
					update(result,timeLogin);
				}else{
					//用户从未登录过
					update(timeLogin,true);
					requestLastData(timeLogin);
				}
				
			}
			@Override
			public void onRequstFail(String message) {
				// TODO Auto-generated method stub
			}
			
			
		});
		//初始化屏幕尺寸
		int[] inch=new ScreenInchUtil().getScreenInch(this);
		width=inch[0];
		height=inch[1];
		inch=null;
		sql=null;
		intent=null;
	}
	
	/**
	 * 判断每天第一次登录更新数据库
	 * @param result
	 * @param timeLogin
	 */
	protected void update(String result, long timeLogin) {
		// TODO Auto-generated method stub
		long isFirst=Long.parseLong(result);
		if (isFirst>=timeLogin) {
			Log.e("test","时间异常");
			return;
		}
		SimpleDateFormat format=new SimpleDateFormat("yyyyMMdd");
		String first=format.format(new Date(isFirst));
		String now=format.format(new Date(timeLogin));
		if (first.equals(now)) {
//			Log.e("test",first);
			//非首次登录
			updateUI();
		}else{
			//只有首次登录才会查询服务器数据
			requestLastData(timeLogin);
		}
		isFirst=0;
		format=null;
		first=null;
		now=null;
	}

	/**
	 * 非首次登录，查询数据库，更新左上角显示的数据
	 */
	private void updateUI() {
		// TODO Auto-generated method stub
		String selectSql="select * from in_out where code='"+SystemParm.md+"'";
		BaseDb.getAsyncDB().addWork(new PSerach(selectSql), new DbHandelSerach<ConsumeInfoModel>() {

			@Override
			public ConsumeInfoModel fromDbToModle(Cursor cursor) {
				// TODO Auto-generated method stub
				if (cursor.moveToFirst()) {
					ConsumeInfoModel cim=null;
					String coupon=cursor.getString(cursor.getColumnIndex("coupon"));
					String remaining_money=cursor.getString(cursor.getColumnIndex("remaining_money"));
					String shop_remaining=cursor.getString(cursor.getColumnIndex("shop_remaining"));
					cim=new ConsumeInfoModel(Double.parseDouble(coupon), Double.parseDouble(remaining_money), Double.parseDouble(shop_remaining));
//					Log.e("test", coupon+"\n"+remaining_money+"\n"+shop_remaining);
					return cim;
				}
				return null;
			}

			@Override
			public void onRequstStart() {
				// TODO Auto-generated method stub
				remainingMoneyConsume.setText("");
				couponConsume.setText("");
				shopRemainingMoney.setText("");
				
			}

			@Override
			public void onRequstFish(ConsumeInfoModel result) {
				// TODO Auto-generated method stub
				if (result!=null) {
					remainingMoneyConsume.setText(result.getMoney()+"");
					couponConsume.setText(result.getDzq()+"");
					shopRemainingMoney.setText(result.getMdmoney()+"");
				}else{
					Toast.makeText(MainActivity.this, "未查询到数据", Toast.LENGTH_SHORT).show();
				}
				
			}

			@Override
			public void onRequstFail(String message) {
				// TODO Auto-generated method stub
				remainingMoneyConsume.setText("");
				couponConsume.setText("");
				shopRemainingMoney.setText("");
				
			}
		});
	}

	/**
	 * fq 
	 * dzq 券消费
	 * money 余额消费
	 * mdmoney 店余额
	 * 查询消费接口 sale/serachNoJsMoney
	 * 查询消费 插入参数  json 格式 {‘md’：？}
	 */
	/**
	 * 请求昨天的数据并且更新到数据库中,而且要将数据显示到页面上
	 * @param timeLogin 
	 */
	private void requestLastData(long timeLogin) {
		// TODO Auto-generated method stub
		try {
			Map<String, String> map=new HashMap<String, String>();
			map.put("md", SystemParm.md);
			HtClient.post(this,"sale/serachNoJsMoney", map,"utf-8" ,new ListHttpResponseHandler(new TypeReference<SerachResultOfReturn<ConsumeInfoModel1>>(){}, "utf-8",consumeBack));
			map=null;
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		//将当前的登录时间更新到数据库中
		update(timeLogin,false);
	}
	
	/**
	 * 当日首次登录查询服务器的数据
	 */
	private SerachListenerDo<ConsumeInfoModel1> consumeBack=new SerachListenerDo<ConsumeInfoModel1>() {

		@Override
		public void onRequstStart() {
			// TODO Auto-generated method stub
			remainingMoneyConsume.setText("");
			couponConsume.setText("");
			shopRemainingMoney.setText("");
		}

		@Override
		public void onRequstFish(SerachResultOfReturn<ConsumeInfoModel1> result) {
			Util.dismissDialog();
			if (result!=null) {
				if (result.getSuccess()) {
					ConsumeInfoModel cim=new ConsumeInfoModel(result.getData());
					couponConsume.setText(cim.getDzq()+"");
					remainingMoneyConsume.setText(cim.getMoney()+"");
					shopRemainingMoney.setText(cim.getMdmoney()+"");
					Log.e("test",cim.getDzq()+"\n"+cim.getMoney()+"\n"+cim.getMdmoney());
					//更新数据库信息
					BaseDb.getAsyncDB().addWork(new Update() {
						@Override
						public String update(SQLiteDatabase db) throws Exception {
							// TODO Auto-generated method stub
							String updateSql="update in_out set coupon='"+couponConsume.getText().toString()+"',remaining_money='"+
							remainingMoneyConsume.getText().toString()+"',shop_remaining='"+shopRemainingMoney.getText().toString()+"' where code='"+SystemParm.md+"'";
							try {
								db.beginTransaction();
								db.execSQL(updateSql);
								db.setTransactionSuccessful();
							} catch (Exception e) {
								// TODO: handle exception
							}finally{
								db.endTransaction();
							}
							updateSql=null;
							return null;
						}
					}, null);
				}else{
					Toast.makeText(MainActivity.this, result.getMessage(), Toast.LENGTH_SHORT).show();
					Log.e("test",result.getMessage());
				}
			}else{
				Toast.makeText(MainActivity.this, "返回为空", Toast.LENGTH_SHORT).show();
			}
		}

		@Override
		public void onRequstFail(int code, String message) {
			// TODO Auto-generated method stub
			remainingMoneyConsume.setText("");
			couponConsume.setText("");
			shopRemainingMoney.setText("");
			Toast.makeText(MainActivity.this, message, Toast.LENGTH_SHORT).show();
			
		}
	};

	/**
	 * 用户第一次登录无数据，将当前登录时间插入数据库
	 * @param timeLogin
	 * @param isNew 只有第一次无数据的时候传入 true
	 */
	protected void update(long timeLogin,final boolean isNew) {
		// TODO Auto-generated method stub
		final String sql="update md set isfirst='"+timeLogin+"' where code='"+SystemParm.md+"'";
		BaseDb.getAsyncDB().addWork(new Update() {
			
			@Override
			public String update(SQLiteDatabase db) throws Exception {
				// TODO Auto-generated method stub
				try {
					db.beginTransaction();
					db.execSQL(sql);
					if (isNew) {
						String insertInOut="insert into in_out (code,coupon,remaining_money,shop_remaining) values ('"+SystemParm.md+"','','','')";
						db.execSQL(insertInOut);
					}
					db.setTransactionSuccessful();
				} catch (Exception e) {
					// TODO: handle exception
				}finally{
					db.endTransaction();
				}
				return null;
			}
		}, null);
	}

	private void addMenu(){
		if(SystemParm.MENU==null||SystemParm.MENU.size()==0){
			return;
		}
		FunctionModel model=null;
		if(SystemParm.MENU.containsKey('A')){
			model=new FunctionModel();
			model.setIamge(R.drawable.ic_launcher);
			model.setText("收银作业");
			model.setClassName(SYFragment.class.getName());
			adaper.addModel(model);
		}
		if(SystemParm.MENU.containsKey('B')){
			model=new FunctionModel();
			model.setIamge(R.drawable.ic_launcher);
			model.setText("商品管理");
			model.setClassName(SPGLFragment.class.getName());
			adaper.addModel(model);
		}
		if(SystemParm.MENU.containsKey('C')){
			model=new FunctionModel();
			model.setIamge(R.drawable.ic_launcher);
			model.setText("销售统计");
			model.setClassName(XSTJFragment.class.getName());
			adaper.addModel(model);
		}
		if(SystemParm.MENU.containsKey('D')){
			model=new FunctionModel();
			model.setIamge(R.drawable.ic_launcher);
			model.setText("网络订单");
			model.setClassName(WLDDFragment.class.getName());
			adaper.addModel(model);
		}
		if(SystemParm.MENU.containsKey('E')){
			model=new FunctionModel();
			model.setIamge(R.drawable.ic_launcher);
			model.setText("会员管理");
			model.setClassName(HYGLFragment.class.getName());
			adaper.addModel(model);
		}
		if(SystemParm.MENU.containsKey('F')){
			model=new FunctionModel();
			model.setIamge(R.drawable.ic_launcher);
			model.setText("采购管理");
			model.setClassName(CGGLFragment.class.getName());
			adaper.addModel(model);
		}
		if(SystemParm.MENU.containsKey('G')){
			model=new FunctionModel();
			model.setIamge(R.drawable.ic_launcher);
			model.setText("库存管理");
			model.setClassName(KCGLFragment.class.getName());
			adaper.addModel(model);
		}
		if(SystemParm.MENU.containsKey('H')){
			model=new FunctionModel();
			model.setIamge(R.drawable.ic_launcher);
			model.setText("生活缴费");
			model.setClassName(SHJFFragment.class.getName());
			adaper.addModel(model);
		}
		adaper.notifyDataSetChanged();
	}
	
	//初始化用户
	private void initUser(){
		TextView tv=(TextView)findViewById(R.id.main_user_name);
		tv.setText(SystemParm.opperName);
		tv.setOnClickListener(ocl);
		ImageView iv=(ImageView)findViewById(R.id.main_user_image);
		iv.setOnClickListener(ocl);
	}
	
	private OnClickListener ocl=new OnClickListener() {
		@Override
		public void onClick(View v) {
			switch (v.getId()) {
			case R.id.main_user_image:
			case R.id.main_user_name://打开用户管理
				Intent intent=new Intent();
				intent.setClass(MainActivity.this, UserActivity.class);
				MainActivity.this.startActivityForResult(intent,0);
				break;
			default:
				break;
			}
		}
	};
	
	
	/**
	 * 根据标签切换Fragment
	 * @param tag 传递的标签内容
	 * @throws Exception 
	 */
	private void tagSelect(String tag) throws Exception{
		
		if(TextUtils.equals(pageTag, tag)){
			return;
		}
		try {
			Fragment f=getFragment(tag);
			ensureTransaction();
			if(pageTag!=null){
				detachFragment(getFragment(pageTag));
			}
			attachFragment(R.id.main_frame_page, f, tag);
			f=null;
		} finally {
			commitTransactions(tag);
		}
	}
	/**
	 * 开启一个事物
	 */
	private void ensureTransaction(){
		if(fragmentTransaction == null){
			fragmentTransaction = fragmentManager.beginTransaction();
			//当前设置的动画效果为 无
			fragmentTransaction.setTransition(FragmentTransaction.TRANSIT_NONE);//设置动画效果         TRANSIT_FRAGMENT_OPEN
		}
	}
	/**
	 * 新增一个Fragment
	 * @param layout
	 * @param f
	 * @param tag
	 */
	private void attachFragment(int layout, Fragment f, String tag){
		if(f != null){
			if(f.isDetached()){//如果是Detached的
				fragmentTransaction.attach(f);
				
			}else if(!f.isAdded()){//如果还没有添加
//				ensureTransaction();
				fragmentTransaction.add(layout, f, tag);
			}else if(f.isHidden()){//如果是隐藏的
				fragmentTransaction.show(f);
			}
			try {
				((BaseFragment)f).showDo(this);
			} catch (Exception e) {
			}
		}
	}
	/**
	 * 移除一个Fragment实例
	 */
	private void detachFragment(Fragment f){
		if(f!=null && !f.isDetached()){
//			ensureTransaction();
			fragmentTransaction.hide(f);//这里只是隐藏 而非detach,remove
			try {
				((BaseFragment)f).hideDo(this);
			} catch (Exception e) {
			}
			pageTag=null;
		}
	}
	/**
	 * 得到 Fragment实例
	 * @param tag 传递的标签内容
	 * @return
	 * @throws Exception 
	 */
	private Fragment getFragment(String tag) throws Exception{
		Fragment f=fragmentManager.findFragmentByTag(tag);
		if(f==null){//若为空则创建
			f=BaseFragment.newInstance(getApplicationContext(), tag);
		}
		return f;
	}
	/**
	 * 提交事务
	 * @param tag 传递的标签内容
	 */
	private void commitTransactions(String tag){
		if (fragmentTransaction != null && !fragmentTransaction.isEmpty()) {
			fragmentTransaction.commit();
			pageTag = tag;
			fragmentTransaction = null;
		}
	}
	
	
	private void addListViewListener(){
		listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
//				Toast.makeText(getApplicationContext(), String.valueOf(position), Toast.LENGTH_SHORT).show();
				try {
					drawerLayout.closeDrawers();
					tagSelect(adaper.getItem(position).getClassName());
					adaper.setSelectId(position);
					adaper.notifyDataSetChanged();
				} catch (Exception e) {
					Toast.makeText(getApplicationContext(), ""+e.toString(), Toast.LENGTH_SHORT).show();
				}
			}
		});
	}
	
	/*
	 * 
	 * 不重载此方法Fragment实例的onActivityResult不会被调用（非 Javadoc）
	 * @see android.app.Activity#onActivityResult(int, int, android.content.Intent)
	 */
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		switch (resultCode) {
		case ResultEnum.LOCK:
			Intent i =new Intent();
			i.setClass(MainActivity.this, LockActivity.class);
			MainActivity.this.startActivity(i);
			break;
		case ResultEnum.LOGOUT:
			clearAll();
			Intent intent =new Intent();
			intent.setClass(MainActivity.this, LogInActivity.class);
			MainActivity.this.startActivity(intent);
			finish();
			break;
		default:
			Fragment f = fragmentManager.findFragmentByTag(pageTag);
			if(f != null){
				f.onActivityResult(requestCode, resultCode, data);
				f=null;
			}
			break;
		}
		super.onActivityResult(requestCode, resultCode, data);
	}
	
	@Override
	protected void onDestroy() {//退出时请空全部
		super.onDestroy();
		/*ensureTransaction();
		List<Fragment> list=fragmentManager.getFragments();
		for(Fragment f:list){
			fragmentTransaction.detach(f);
			Log.e("test", f.getTag());
		}
		fragmentTransaction.commit();
		fragmentTransaction=null;
		fragmentManager=null;*/
	}
	@Override
	protected void onResume() {
		super.onResume();
	}
	@Override
	protected void onPause() {
		super.onPause();
	}
	/*
	 * 因按home键退出程序而又由于系统内存不足而造成Activity被销毁不保存之前的信息 防止activity重建时重影
	 * (non-Javadoc)
	 * @see android.support.v4.app.FragmentActivity#onSaveInstanceState(android.os.Bundle)
	 */
	@Override
	protected void onSaveInstanceState(Bundle outState) {
		// super.onSaveInstanceState(outState);
	}
	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		switch(keyCode){
		case KeyEvent.KEYCODE_BACK://返回
			if(event.getRepeatCount()==0){
				return true;
			}
			break;
		}
		return false;
	}

	/**
	 * 更新左上角text方法
	 * @param coupon
	 * @param remaining_money
	 */
	public void updateText(String coupon,String remaining_money,String shop_remaining){
		couponConsume.setText(coupon);
		remainingMoneyConsume.setText(remaining_money);
		shopRemainingMoney.setText(shop_remaining);
	}
	
	/**
	 * 获取左上角text文字内容
	 * @return
	 */
	public Map<String,String> getUpText(){
		Map<String,String> map=new HashMap<String, String>();
		map.put("coupon", couponConsume.getText().toString().trim());
		map.put("remaining_money", remainingMoneyConsume.getText().toString().trim());
		map.put("shop_remaining", shopRemainingMoney.getText().toString().trim());
		return map;
	}
	
	private void clearAll(){
		SystemParm.IS_DZ=false;
		SystemParm.KEY=null;
		SystemParm.md=null;
		SystemParm.mdName=null;
		SystemParm.MENU.clear();
		SystemParm.opper=null;
		SystemParm.opperName=null;
		SystemParm.SESSION_ID=null;
		SystemParm.PASS=null;
	}
}
